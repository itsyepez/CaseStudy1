-- ¿CUÁL ES LA CANTIDAD TOTAL QUE GASTÓ CADA CLIENTE EN EL RESTAURANTE?

SELECT SUM(E.PRICE) AS TOTAL_GASTADO, S.CUSTOMER_ID
FROM MENU E 
JOIN SALES S ON (E.PRODUCT_ID = S.PRODUCT_ID)
GROUP BY S.CUSTOMER_ID
ORDER BY S.CUSTOMER_ID;

-- ¿CUÁNTOS DÍAS HA VISITADO CADA CLIENTE EL RESTAURANTE?

SELECT CUSTOMER_ID, COUNT(DISTINCT  ORDER_DATE) AS DIA 
        FROM SALES
        GROUP BY CUSTOMER_ID;
        
-- --3) ¿CUÁL FUE EL PRIMER ARTÍCULO DEL MENÚ COMPRADO POR CADA CLIENTE?        

SELECT A.CUSTOMER_ID, A.PRODUCT_ID, B.PRODUCT_NAME
FROM SALES A
INNER JOIN MENU B
USING(PRODUCT_ID)
WHERE ORDER_DATE = (SELECT MIN(ORDER_DATE) FROM SALES )
GROUP BY CUSTOMER_ID;

-- 4) ¿CUÁL ES EL ARTÍCULO MÁS COMPRADO EN EL MENÚ Y CUÁNTAS VECES LO COMPRARON TODOS LOS CLIENTES?

SELECT COUNT(PRODUCT_ID), MENU.PRODUCT_NAME
FROM SALES
INNER JOIN MENU
USING(PRODUCT_ID)
GROUP BY PRODUCT_ID
ORDER BY COUNT(PRODUCT_ID) DESC ;

-- --5) ¿QUÉ ARTÍCULO FUE EL MÁS POPULAR PARA CADA CLIENTE?

WITH A AS (

			SELECT CUSTOMER_ID, COUNT(PRODUCT_ID) AS TOTAL
			FROM SALES 

			GROUP BY PRODUCT_ID, CUSTOMER_ID 
)
SELECT MAX(TOTAL) AS MAS_POPULAR, CUSTOMER_ID
FROM A
GROUP BY CUSTOMER_ID;

-- OTRA FORMA DE SOLUCIONARLO

WITH TMP AS(
SELECT
E.PRODUCT_NAME,
COUNT(*) AS TOTAL_COMPRADO,
S.CUSTOMER_ID
FROM SALES S
JOIN MENU E 
ON S.PRODUCT_ID = E.PRODUCT_ID
GROUP BY  E.PRODUCT_NAME,S.CUSTOMER_ID
),
TOP AS (
SELECT PRODUCT_NAME, CUSTOMER_ID, TOTAL_COMPRADO,
DENSE_RANK() OVER( PARTITION BY CUSTOMER_ID ORDER BY TOTAL_COMPRADO DESC) AS RANK_PRODUCT
FROM TMP
)
SELECT PRODUCT_NAME, CUSTOMER_ID, TOTAL_COMPRADO
FROM TOP
WHERE RANK_PRODUCT = 1;

-- 6) ¿QUÉ ARTÍCULO COMPRÓ PRIMERO EL CLIENTE DESPUÉS DE CONVERTIRSE EN MIEMBRO?

WITH TMP AS(
SELECT
E.PRODUCT_NAME,
S.CUSTOMER_ID,
B.JOIN_DATE,
S.ORDER_DATE,
DENSE_RANK() OVER(PARTITION BY S.CUSTOMER_ID ORDER BY S.ORDER_DATE ASC ) AS RANK_
FROM SALES S
JOIN MENU E 
ON (S.PRODUCT_ID = E.PRODUCT_ID)
JOIN MEMBERS B
ON (S.CUSTOMER_ID = B.CUSTOMER_ID) 
WHERE S.ORDER_DATE >= B.JOIN_DATE
) 
SELECT PRODUCT_NAME, CUSTOMER_ID, JOIN_DATE, ORDER_DATE
FROM TMP
WHERE RANK_ = 1 ;

-- 7) --¿QUÉ ARTÍCULO SE COMPRÓ JUSTO ANTES DE QUE EL CLIENTE SE CONVIRTIERA EN MIEMBRO?

WITH TMP AS(
SELECT
E.PRODUCT_NAME,
S.CUSTOMER_ID,
B.JOIN_DATE,
S.ORDER_DATE,
DENSE_RANK() OVER(PARTITION BY S.CUSTOMER_ID ORDER BY S.ORDER_DATE DESC ) AS RANK_
FROM SALES S
JOIN MENU E 
ON (S.PRODUCT_ID = E.PRODUCT_ID)
JOIN MEMBERS B
ON (S.CUSTOMER_ID = B.CUSTOMER_ID) 
WHERE S.ORDER_DATE < B.JOIN_DATE
) 
SELECT PRODUCT_NAME, CUSTOMER_ID, JOIN_DATE, ORDER_DATE
FROM TMP
WHERE RANK_ = 1 ;

-- 8) ¿CUÁL ES EL TOTAL DE ARTÍCULOS Y LA CANTIDAD GASTADA POR CADA MIEMBRO ANTES DE CONVERTIRSE EN MIEMBRO?

SELECT
S.CUSTOMER_ID,
COUNT(E.PRODUCT_ID) AS TOTAL_COMPRADO,
SUM(E.PRICE) AS TOTAL_GASTADO
FROM SALES S
JOIN MENU E 
ON (S.PRODUCT_ID = E.PRODUCT_ID)
JOIN MEMBERS B
ON (S.CUSTOMER_ID = B.CUSTOMER_ID) 
WHERE S.ORDER_DATE < B.JOIN_DATE
GROUP BY S.CUSTOMER_ID
ORDER BY S.CUSTOMER_ID;

-- 9) SI CADA $ 1 GASTADO EQUIVALE A 10 PUNTOS Y EL SUSHI TIENE UN MULTIPLICADOR DE PUNTOS 2X, ¿CUÁNTOS PUNTOS TENDRÍA CADA CLIENTE?
-- SUPOSICIÓN: SOLO LOS CLIENTES QUE SON MIEMBROS RECIBEN PUNTOS AL COMPRAR ARTÍCULOS, LOS PUNTOS LOS RECIBEN EN LAS ORDENES IGUALES O POSTERIORES A LA FECHA
-- EN LA QUE SE CONVIERTEN EN MIEMBROS. 

WITH TMP AS(
SELECT
S.CUSTOMER_ID,
SUM(CASE WHEN E.PRODUCT_NAME = 'SUSHI' THEN E.PRICE*20 ELSE 0 END) AS TOTAL_PUNTOS_SUSHI,
SUM(CASE WHEN E.PRODUCT_NAME <> 'SUSHI' THEN E.PRICE*10 ELSE 0 END) AS TOTAL_PUNTOS_OTROS_PRODUCTOS
FROM SALES S
JOIN MENU E 
ON (S.PRODUCT_ID = E.PRODUCT_ID) JOIN MEMBERS B
ON (S.CUSTOMER_ID = B.CUSTOMER_ID)
WHERE S.ORDER_DATE >= B.JOIN_DATE
GROUP BY S.CUSTOMER_ID
)
SELECT CUSTOMER_ID,
(TOTAL_PUNTOS_SUSHI + TOTAL_PUNTOS_OTROS_PRODUCTOS) AS TOTAL_PUNTOS
FROM TMP
ORDER BY CUSTOMER_ID;



